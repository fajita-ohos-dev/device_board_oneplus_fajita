From 366e2804dbabcf08ba69c51b396033efee2a0d83 Mon Sep 17 00:00:00 2001
From: diemit <598757652@qq.com>
Date: Thu, 2 Feb 2023 18:16:02 +0900
Subject: [PATCH] rpi4

Change-Id: I71c6140fe28554acb08f730f0933577cba7792dc
---
 bundle.json                                   |   1 +
 native_window_wrapper/BUILD.gn                |  28 +++++
 .../native_window_wrapper.cpp                 | 111 ++++++++++++++++++
 native_window_wrapper/native_window_wrapper.h |  16 +++
 resources/config/BUILD.gn                     |   4 +-
 .../config/other/display_manager_config.xml   |  10 +-
 6 files changed, 167 insertions(+), 3 deletions(-)
 create mode 100644 native_window_wrapper/BUILD.gn
 create mode 100644 native_window_wrapper/native_window_wrapper.cpp
 create mode 100644 native_window_wrapper/native_window_wrapper.h

diff --git a/bundle.json b/bundle.json
index 72d76a3..b47f2e6 100644
--- a/bundle.json
+++ b/bundle.json
@@ -58,6 +58,7 @@
         "group_type": {
           "base_group": [
             "//foundation/window/window_manager/snapshot:snapshot_display",
+            "//foundation/window/window_manager/native_window_wrapper:native_window_wrapper",
             "//foundation/window/window_manager/interfaces/kits/napi/window_runtime/window_stage_napi:windowstage",
             "//foundation/window/window_manager/interfaces/kits/napi:napi_packages",
             "//foundation/window/window_manager/resources:window_resources"
diff --git a/native_window_wrapper/BUILD.gn b/native_window_wrapper/BUILD.gn
new file mode 100644
index 0000000..c1699bf
--- /dev/null
+++ b/native_window_wrapper/BUILD.gn
@@ -0,0 +1,28 @@
+# Copyright (c) Hisilicon Technologies Co., Ltd. 2021-2021. All rights reserved
+import("//build/ohos.gni")
+
+ohos_shared_library("native_window_wrapper") {
+  sources = ["native_window_wrapper.cpp"]
+  include_dirs = [
+      "."
+  ]
+
+  cflags = [
+    "-Wall",
+    "-Werror",
+    "-Wno-cast-qual",
+    "-Wno-pointer-arith",
+    "-Wno-unused-parameter",
+    "-Wno-unused-variable",
+    "-Wno-delete-incomplete",
+  ]
+
+  deps = [
+    "//foundation/window/window_manager/wm:libwm",
+    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
+    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
+  ]
+
+  part_name = "window_manager"
+  subsystem_name = "window"
+}
\ No newline at end of file
diff --git a/native_window_wrapper/native_window_wrapper.cpp b/native_window_wrapper/native_window_wrapper.cpp
new file mode 100644
index 0000000..360e10b
--- /dev/null
+++ b/native_window_wrapper/native_window_wrapper.cpp
@@ -0,0 +1,111 @@
+#include "native_window_wrapper.h"
+#include "wm_common.h"
+#include "window_option.h"
+#include "window.h"
+#include "surface.h"
+#include "ui/rs_surface_node.h"
+
+using namespace OHOS;
+
+class NativeWindowWrapper {
+public:
+    virtual bool CreateWindow(uint32_t w,uint32_t h);
+    
+    virtual void* GetWindow()
+    {
+        return nativeWindow_;
+    }
+    void SetVisibility(bool visible);
+private:
+    void* nativeWindow_ = nullptr;
+    sptr<Rosen::Window> previewWindow_ = nullptr;
+};
+
+extern "C" {
+struct NativeWindow* CreateNativeWindowFromSurface(void* pSuface);
+int32_t NativeWindowHandleOpt(struct NativeWindow *window, int code, ...);
+enum NativeWindowOperation {
+    SET_BUFFER_GEOMETRY,
+    GET_BUFFER_GEOMETRY,
+    GET_FORMAT,
+    SET_FORMAT,
+    GET_USAGE,
+    SET_USAGE,
+    SET_STRIDE,
+    GET_STRIDE,
+    SET_SWAP_INTERVAL,
+    GET_SWAP_INTERVAL,
+    SET_COLOR_GAMUT,
+    GET_COLOR_GAMUT,
+};
+
+void* CreateWindowWrapper()
+{
+    void* wrapper = new NativeWindowWrapper();
+    return wrapper;
+}
+
+bool CreateWindow(void* wrapper, uint32_t w, uint32_t h)
+{
+    NativeWindowWrapper* wrapperObj = static_cast<NativeWindowWrapper*>(wrapper);
+    return wrapperObj->CreateWindow(w, h);
+}
+
+void* GetNativeWindow(void* wrapper)
+{
+    NativeWindowWrapper* wrapperObj = static_cast<NativeWindowWrapper*>(wrapper);
+    return wrapperObj->GetWindow();
+}
+
+void SetVisibility(void* wrapper,bool visible)
+{
+    NativeWindowWrapper* wrapperObj = static_cast<NativeWindowWrapper*>(wrapper);
+    return wrapperObj->SetVisibility(visible);
+}
+
+void DestroyWindowWrapper(void* wrapper)
+{
+    if (wrapper != nullptr) {
+        delete wrapper;
+    }
+}
+
+bool GetWrapperFunc(WrapperFunc* funcs)
+{
+    if(funcs != nullptr) {
+        funcs->CreateWindow = CreateWindow;
+        funcs->CreateWindowWrapper = CreateWindowWrapper;
+        funcs->GetNativeWindow = GetNativeWindow;
+        funcs->SetVisibility = SetVisibility;
+        funcs->DestroyWindowWrapper = DestroyWindowWrapper;
+        return true;
+    }
+    return false;
+}
+}
+
+bool NativeWindowWrapper::CreateWindow(uint32_t w, uint32_t h)
+{
+    sptr<Rosen::WindowOption> option = new Rosen::WindowOption();
+    option->SetWindowRect({0, 0, w, h});
+    option->SetWindowType(Rosen::WindowType::WINDOW_TYPE_APP_LAUNCHING);
+    option->SetWindowMode(Rosen::WindowMode::WINDOW_MODE_FLOATING);
+    previewWindow_ = Rosen::Window::Create("native_window", option);
+    if (previewWindow_ == nullptr || previewWindow_->GetSurfaceNode() == nullptr) {
+        printf("previewWindow_ is nullptr\n");
+        return false;
+    }
+
+    previewWindow_->Show();
+    auto surface = previewWindow_->GetSurfaceNode()->GetSurface();
+    nativeWindow_ = CreateNativeWindowFromSurface(&surface);
+    NativeWindowHandleOpt(static_cast<struct NativeWindow *>(nativeWindow_), SET_BUFFER_GEOMETRY, w, h);
+
+    printf("CreateWindow nativeWindow_ %p  w: %d, h: %d \n", nativeWindow_, w, h);
+    return true;
+}
+
+void NativeWindowWrapper::SetVisibility(bool visible)
+{
+    printf("SetVisibility %s\n", visible ? "true" : "false");
+}
\ No newline at end of file
diff --git a/native_window_wrapper/native_window_wrapper.h b/native_window_wrapper/native_window_wrapper.h
new file mode 100644
index 0000000..467fe7d
--- /dev/null
+++ b/native_window_wrapper/native_window_wrapper.h
@@ -0,0 +1,16 @@
+#ifndef NATIVE_WINDOW_WRAPPER
+#define NATIVE_WINDOW_WRAPPER
+#include <cstdint>
+
+extern "C" {
+    typedef struct {
+        void* (*CreateWindowWrapper)();
+        bool (*CreateWindow)(void* wrapper, uint32_t w, uint32_t h);
+        void* (*GetNativeWindow)(void* wrapper);
+        void (*SetVisibility)(void* wrapper, bool visible);
+        void (*DestroyWindowWrapper)(void* wrapper);
+    } WrapperFunc;
+    bool GetWrapperFunc(WrapperFunc* funcs);    
+}
+
+#endif // NATIVE_WINDOW_WRAPPER
\ No newline at end of file
diff --git a/resources/config/BUILD.gn b/resources/config/BUILD.gn
index c1ffc9b..d402944 100644
--- a/resources/config/BUILD.gn
+++ b/resources/config/BUILD.gn
@@ -18,7 +18,7 @@ ohos_prebuilt_etc("window_manager_config") {
     install_enable = true
   } else {
     source = "//foundation/window/window_manager/resources/config/other/window_manager_config.xml"
-    install_enable = false
+    install_enable = true
   }
   part_name = "window_manager"
   subsystem_name = "window"
@@ -31,7 +31,7 @@ ohos_prebuilt_etc("display_manager_config") {
     install_enable = true
   } else {
     source = "//foundation/window/window_manager/resources/config/other/display_manager_config.xml"
-    install_enable = false
+    install_enable = true
   }
   part_name = "window_manager"
   subsystem_name = "window"
diff --git a/resources/config/other/display_manager_config.xml b/resources/config/other/display_manager_config.xml
index ea91687..162e78b 100644
--- a/resources/config/other/display_manager_config.xml
+++ b/resources/config/other/display_manager_config.xml
@@ -15,5 +15,13 @@
  -->
  <Configs>
     <!--Window display dpi, valid range is 80~640, use 0 if no configuration is requeired-->
-    <dpi>0</dpi>
+    <dpi>210</dpi>
+    <!-- Indicate the deviation between the default device display direction and the direction -->
+    <!-- of the sensor. Use 0 in default, available values are {0, 90, 180, 270} -->
+    <defaultDeviceRotationOffset>0</defaultDeviceRotationOffset>
+    <!-- Indicates orientation of the built-in screen -->
+    <!-- 0: Orientation::UNSPECIFIED -->
+    <!-- 1: Orientation::VERTICAL         2: Orientation::HORIZONTAL-->
+    <!-- 3: Orientation::REVERSE_VERTICAL 4: Orientation::REVERSE_HORIZONTAL -->
+    <buildInDefaultOrientation>1</buildInDefaultOrientation>
  </Configs>
\ No newline at end of file
-- 
2.25.1

